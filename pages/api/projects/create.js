import { supabase } from '../../../utils/supabase';

export default async function handler(req, res) {
  console.log(' [POST] /api/projects/create - Starting request');
  
  if (req.method !== 'POST') {
    console.log(' Invalid method:', req.method);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  // Get the token from the request header
  const token = req.headers.authorization?.split('Bearer ')[1];
  if (!token) {
    console.log(' No authorization token provided');
    return res.status(401).json({ error: 'No token provided' });
  }
  console.log(' Authorization token received');

  try {
    // Step 1: Verify user authentication
    console.log(' Verifying user authentication...');
    const { data: { user }, error: authError } = await supabase.auth.getUser(token);
    
    if (authError || !user) {
      console.log(' Authentication failed:', authError?.message || 'No user found');
      return res.status(401).json({ error: 'Not authenticated' });
    }
    console.log(' User authenticated:', { userId: user.id, email: user.email });

    const { title } = req.body;
    console.log(' Creating project with title:', title || 'Untitled Project');

    // Step 2: Insert new project (UUID is auto-generated by Supabase)
    console.log(' Inserting project into database...');
    const { data: project, error } = await supabase
      .from('projects')
      .insert([
        { 
          user_id: user.id,
          title: title || 'Untitled Project'
        }
      ])
      .select()
      .single();

    if (error) {
      console.error(' Database insertion failed:', error);
      throw error;
    }

    console.log(' Project created successfully:', {
      projectId: project.id,
      userId: project.user_id,
      title: project.title
    });

    return res.status(200).json(project);
  } catch (error) {
    console.error(' Project creation error:', error);
    return res.status(500).json({ error: error.message });
  }
}
